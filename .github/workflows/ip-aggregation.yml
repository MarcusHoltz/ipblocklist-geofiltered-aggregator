name: Generate Multi-Country Blocklists

#-------------------------------------------------------------------#
##  ##  ##          DONT FORGET TO CHANGE:                 ##  ##  ## 
##  ##  ##    settings > actions > workflow permissions    ##  ##  ##
##  ##  ##    Set to "Read and write permissions"          ##  ##  ##
#-------------------------------------------------------------------#

permissions:
  contents: write
  actions: read

on:
  # Scheduled runs - daily at 2:17 AM UTC (using prime number)
  schedule:
     #        ┌───────────── minute (0 - 59)
     #        │ ┌───────────── hour (0 - 23)
     #        │ │ ┌───────────── day of month (1 - 31)
     #        │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
     #        │ │ │ │ ┌───────────── day of week (0 - 6) (SUN-SAT, 0 = SUN)
     #        │ │ │ │ │
     #        * * * * *
    - cron: "17 2 * * *"
     # Scheduled run above - daily at 2:17 AM UTC (using prime number for odd time)
     #  cron: "37 13 * * 6"
     # Example run above - Saturday at 13:37 UTC (7:37am MDT, once a week, on Sunday)
     #  cron: "7 6 */2 * *"
     # Example run above - Every other day at 6:07am UTC (days of the month divisible by 2, even days)

  # Trigger on .env file changes
  push:
    paths:
      - '.env'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'filter_ips.py'
      - 'run.sh'
      - '.github/workflows/ip-aggregation.yml'
    branches: [ "main", "master" ]
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_run:
        description: 'Force run even if no changes'
        required: false
        default: 'false'
        type: boolean

env:
  # Set timezone for consistent logging
  TZ: UTC

jobs:
  permission-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check workflow permissions setup
        run: |
          # Show reminder on first few runs or if this is an initial commit
          if [ $GITHUB_RUN_NUMBER -le 3 ]; then
            echo "#-------------------------------------------------------------------#"
            echo "##  ##  ##          DONT FORGET TO CHANGE:                 ##  ##  ##"
            echo "##  ##  ##    settings > actions > workflow permissions    ##  ##  ##"
            echo "##  ##  ##    Set to \"Read and write permissions\"          ##  ##  ##"
            echo "#-------------------------------------------------------------------#"
            echo ""
            echo "ℹ️  This reminder will show for the first 3 workflow runs."
            echo "   After configuring permissions, this workflow will run normally."
            echo ""
            
            # Exit successfully but skip main workflow if this is run #1
            if [ $GITHUB_RUN_NUMBER -eq 1 ]; then
              echo "⚠️  Skipping main workflow on first run. Please configure permissions first."
              echo "   You can re-run this workflow manually after setting permissions."
              exit 0
            fi
          fi
          
  aggregate-ips:
    needs: permission-check
    runs-on: ubuntu-latest
    # Only run if it's not the very first run, or if manually triggered
    if: github.run_number > 1 || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for better git operations
          fetch-depth: 0

      - name: Set up environment
        run: |
          # Create necessary directories
          mkdir -p data/input data/output data/geoip
          
          # Show initial repository state
          echo "=== Repository Structure ==="
          ls -la
          
          echo "=== Environment File ==="
          cat .env

      - name: Detect country configurations
        run: |
          echo "=== Detecting Country Configurations ==="
          
          # Extract and display all COUNTRY_* variables
          echo "Country configurations found:"
          grep "^COUNTRY_ISO_CODE" .env | while read line; do
            echo "  $line"
          done
          
          grep "^COUNTRY_NAME" .env | while read line; do
            echo "  $line"
          done
          
          # Count countries
          COUNTRY_COUNT=$(grep "^COUNTRY_ISO_CODE" .env | wc -l)
          echo "Total countries configured: $COUNTRY_COUNT"
          
          if [ "$COUNTRY_COUNT" -eq 0 ]; then
            echo "❌ No countries configured! Please set COUNTRY_ISO_CODE_* variables in .env"
            exit 1
          fi
          
          # Store count for later steps
          echo "COUNTRY_COUNT=$COUNTRY_COUNT" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          echo "=== Building Docker Image ==="
          docker build --tag ip-aggregator:latest .

      - name: Run IP aggregation
        run: |
          echo "=== Starting IP Aggregation Process ==="
          # Run the Docker container
          docker compose up --build
          
          echo "=== Process Complete ==="

      - name: Calculate blocklist statistics
        run: |
          echo "=== Calculating Blocklist Statistics ==="
          
          # Set TOTAL_BL_COUNT environment variable
          if [ -f "data/output/aggregated.txt" ]; then
            TOTAL_BL_COUNT=$(wc -l < data/output/aggregated.txt)
            echo "TOTAL_BL_COUNT=$TOTAL_BL_COUNT" >> $GITHUB_ENV
            echo "✅ Total blocked IPs: $TOTAL_BL_COUNT"
          else
            echo "TOTAL_BL_COUNT=0" >> $GITHUB_ENV
            echo "❌ aggregated.txt not found, setting TOTAL_BL_COUNT to 0"
          fi
          
          # Calculate additional statistics for comprehensive reporting
          COUNTRY_FILES_COUNT=$(find data/output/ -name "aggregated-*-only.txt" | wc -l || echo "0")
          COMBINED_FILES_COUNT=$(find data/output/ -name "aggregated-*-combined.txt" | wc -l || echo "0")
          
          echo "COUNTRY_FILES_COUNT=$COUNTRY_FILES_COUNT" >> $GITHUB_ENV
          echo "COMBINED_FILES_COUNT=$COMBINED_FILES_COUNT" >> $GITHUB_ENV
          
          echo "📊 Statistics Summary:"
          echo "   - Total IPs blocked: $TOTAL_BL_COUNT"
          echo "   - Countries configured: $COUNTRY_COUNT"
          echo "   - Country-specific files: $COUNTRY_FILES_COUNT"
          echo "   - Combined files: $COMBINED_FILES_COUNT"


      - name: Verify outputs
        run: |
          echo "=== Checking Output Files ==="
          ls -la data/output/
          
          if [ -f "data/output/aggregated.txt" ]; then
            echo "✅ Aggregated IPs: $(wc -l < data/output/aggregated.txt) lines"
            echo "First 5 aggregated IPs:"
            head -5 data/output/aggregated.txt
          else
            echo "❌ aggregated.txt not found!"
          fi
          
          echo ""
          echo "=== Country-Specific Files ==="
          
          # Find all country-specific files
          find data/output/ -name "aggregated-*-only.txt" | sort | while read file; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              count=$(wc -l < "$file")
              echo "✅ $filename: $count IPs"
            fi
          done
          
          # Find combined files
          find data/output/ -name "aggregated-*-combined.txt" | sort | while read file; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              count=$(wc -l < "$file")
              echo "✅ Combined file $filename: $count unique IPs"
            fi
          done
          
          if [ -f "data/output/stats.md" ]; then
            echo ""
            echo "=== Statistics Summary ==="
            cat data/output/stats.md
          fi

      - name: Generate enhanced README with statistics
        run: |
          echo "=== Generating Enhanced README with Statistics ==="
          
          # Function to add commas to numbers
          add_commas() {
            local num=$1
            echo "$num" | sed ':a;s/\B[0-9]\{3\}\>/,&/;ta'
          }
          
          cat > README.md << 'EOF'
          # Multi-Country IP Address Internet Blocklist Aggregator
          
          ![Workflow Status](https://github.com/${{ github.repository }}/actions/workflows/ip-aggregation.yml/badge.svg)
          ![Countries](https://img.shields.io/badge/Countries-${{ env.COUNTRY_COUNT }}-278EF5)
          ![Total IPs Blocked](https://img.shields.io/badge/Blocked_IPs-${{ env.TOTAL_BL_COUNT }}-2D56A8)
                    
          ![Issues](https://img.shields.io/github/issues/${{ github.repository }})
          ![Last Commit](https://img.shields.io/github/last-commit/${{ github.repository }})
          ![Forks](https://img.shields.io/github/forks/${{ github.repository }})

          * * *

          Automated IP blocklist aggregation with multi-country geographical filtering

          * * *
          
          ## 🚀 Features
          
          - **Multi-Country Support**: Filter IPs from multiple countries - aggregate or individual lists
          - **Automated Aggregation**: Combines multiple IP blocklists into a single deduplicated list
          - **Geographical Filtering**: Filters IPs by country with support for multiple countries
          - **Individual & Combined Files**: Generates both per-country files and combined multi-country files
          - **Docker Support**: Runs in containerized environment for consistency
          - **GitHub Actions**: Automated daily updates with manual trigger support
          - **Multi-source**: Supports multiple URL sources via environment configuration
          - **Enhanced Statistics**: Comprehensive reporting with per-country breakdowns
          
          ## 📊 Latest Statistics
          
          EOF
          
          # Append current statistics if available
          if [ -f "data/output/stats.md" ]; then
            # Extract content after the first heading
            tail -n +3 data/output/stats.md >> README.md
            echo "" >> README.md
          fi
          
          # Add current files summary
          echo "### 📁 Generated Files" >> README.md
          echo "" >> README.md
          
          if [ -f "data/output/aggregated.txt" ]; then
            TOTAL_IPS=$(wc -l < data/output/aggregated.txt)
            FORMATTED_TOTAL=$(add_commas "$TOTAL_IPS")
            echo "- **\`aggregated.txt\`** - $FORMATTED_TOTAL total aggregated IPs from all sources" >> README.md
          fi
          
          # List all country-specific files
          find data/output/ -name "aggregated-*-only.txt" | sort | while read file; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              count=$(wc -l < "$file")
              formatted_count=$(add_commas "$count")
              country_code=$(echo "$filename" | sed 's/aggregated-\(.*\)-only\.txt/\1/' | tr '[:lower:]' '[:upper:]')
              echo "- **\`$filename\`** - $formatted_count IPs from $country_code" >> README.md
            fi
          done
          
          # List combined files
          find data/output/ -name "aggregated-*-combined.txt" | sort | while read file; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              count=$(wc -l < "$file")
              formatted_count=$(add_commas "$count")
              echo "- **\`$filename\`** - $formatted_count unique IPs (deduplicated across all countries)" >> README.md
            fi
          done
          
          cat >> README.md << 'EOF'
          
          ---
          
          ## 🛴 Install
          
          Set up your own copy of this repository to aggregate and filter your IP blocklists for multiple countries.
          
          * * *
          
          ### 👆 Click the green "Use this template" button in the upper right corner
          
                   
          1. **Sign in** to GitHub and navigate to [this repository](https://github.com/${{ github.repository }}).
          2. Click the **"Use this template"** button (in the upper right corner).
          3. Select **Create a new repository**. Enter a name (e.g., `my-eu-badip-blocklist`), and confirm.
          4. Your new repository is now independent — it will not share commit history with the original.
          5. You can immediately begin editing or configuring it for your own multi-country IP aggregation project.
          
          > The **"Use this template"** button on GitHub allows you to quickly create a new, independent repository pre-populated with the project's files and structure. Your new repository won't inherit commit history from the template. This is perfect for your personal blocklist repo.
          
          *Usage is below for steps on running this repository with Github Actions in your new IP aggregation project.*

          
          ## 🛠 Usage
          
          ### GitHub Actions (Recommended)
          
          #### First Step - Enable Write Permissions

          1. **Enable Actions**: Go to Settings > Actions > General > Workflow permissions
          2. **Set Permissions**: Select "Read and write permissions", click "Save".

          
          #### Second Step - Configure The Repo

          3. **Configure Environment**: Edit `.env` file with your desired sources and countries
          4. **Your Favorite Blocklists**: Load as many blocklists as you like, just make sure the line starts with `LIST1_`, `LIST2_`, `LIST3_`, etc.
          5. **Multiple Countries**: Countries can be modified the same way, `COUNTRY_ISO_CODE_1`, `COUNTRY_NAME_1`, `COUNTRY_ISO_CODE_2`, `COUNTRY_NAME_2`, etc.
          6. **Find Country Codes**: You can find your country codes in the [geoip2-ipv4 spreadsheet](https://datahub.io/core/geoip2-ipv4)
          7. **Automatic Runs**: The workflow runs daily at **02:17 UTC** or anytime if you [modified the cron file](https://github.com/${{ github.repository }}/edit/main/.github/workflows/ip-aggregation.yml)


          #### Third Step - Running This Action

          8. **Run This Now**: You can run this Github Action by using the "Action" tab up top
          9. **Generate Multi-Country Blocklists**: Under "All workflows" you can find this action
          10. **Run workflow**: On this page, off to the right is a button with a dropdown to "Run workflow"
          11. **Off to the races**: Each run will consume some of your free monthly Github Actions 2000 min (33.3 hours)
          
          > Please adjust cron, it is how often your aggregator runs in [.github/workflows/ip-aggregation.yml](https://github.com/${{ github.repository }}/edit/main/.github/workflows/ip-aggregation.yml), also modify your blacklists and countries in the [.env](https://github.com/${{ github.repository }}/edit/main/.env) file.
          
          ## ⚙ Configuration
          
          ### 🌍 Multi-Country Setup
          
          The `.env` file supports multiple countries:
          
          ```bash
          # European Union Example
          COUNTRY_ISO_CODE_1=DE
          COUNTRY_NAME_1=Germany
          
          COUNTRY_ISO_CODE_2=FR
          COUNTRY_NAME_2=France
          
          COUNTRY_ISO_CODE_3=NL
          COUNTRY_NAME_3=Netherlands
          
          COUNTRY_ISO_CODE_4=IT
          COUNTRY_NAME_4=Italy
          
          COUNTRY_ISO_CODE_5=ES
          COUNTRY_NAME_5=Spain
          ```
          
          This will generate:
          - `aggregated-de-only.txt` (Germany IPs)
          - `aggregated-fr-only.txt` (France IPs) 
          - `aggregated-nl-only.txt` (Netherlands IPs)
          - `aggregated-it-only.txt` (Italy IPs)
          - `aggregated-es-only.txt` (Spain IPs)
          - `aggregated-multi-5countries-combined.txt` (All countries combined, deduplicated)
          
          ### Sample .env file
          
          ```bash
          # Add your IP list sources
          LIST_1=https://example.com/blocklist1.txt
          LIST_2=https://example.com/blocklist2.txt
          
          # Set multiple countries (NEW FEATURE!)
          COUNTRY_ISO_CODE_1=DE
          COUNTRY_NAME_1=Germany
          
          COUNTRY_ISO_CODE_2=FR  
          COUNTRY_NAME_2=France
          
          # Configure paths (usually don't need to change)
          GEOIP_CSV_PATH=/data/geoip/geoip2-ipv4.csv
          ALL_IPS_FROM_LISTS=/data/output/aggregated.txt
          ```
          
          ## 🏠 Local Deployment (Alternative)
          
          If you'd rather download this repo and run this project offline, the instructions are below:
          
          ### 1. Clone the repository
          
          The first step is to download the files from the internet, and get them locally on your machine.
          
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          ```
          
          ### 2. Configure your sources and countries in .env
          
          The next step is to configure the project to your liking. Edit your `.env` file. You can enter as many IP based block lists as you need and configure multiple countries.
          
          ```bash
          nano .env
          ```

          ### 3. Run with Docker Compose
          
          You can now run the project and see what happens.

          ```bash
          docker compose up --build
          ```
          
          ### 4. Check results
          
          Let's see what happened!
          
          ```bash
          ls -la data/output/
          ```
          
          ## 📁 Output Files
          
          ### Per-Country Files
          - `data/output/aggregated-{country-code}-only.txt` - Country-specific IPs (e.g., `aggregated-de-only.txt` for Germany)
          
          ### Combined Multi-Country Files  
          - `data/output/aggregated-multi-{number-of-countries-total}countries-combined.txt` - Combined IPs from all countries (deduplicated)
          - Example: `aggregated-multi-3countries-combined.txt` for Germany + France + Netherlands
          
          ### Core Files
          - `data/output/aggregated.txt` - All deduplicated IPs from all sources (before country filtering)
          - `data/output/stats.md` - Comprehensive processing statistics with per-country breakdowns
          
          ## 🔄 Workflow Triggers
          
          The GitHub Action runs automatically when:
          
          - **Daily Schedule**: Every day at 02:17 UTC
          - **File Changes**: When `.env`, `Dockerfile`, or key scripts are modified
          - **Manual Trigger**: Via GitHub Actions interface
          
          ## ⚡ Performance
          
          - **Multi-Country Processing**: Parallel processing of multiple countries
          - **Processing Speed**: ~10,000 IPs per second for filtering per country
          - **Parallel Processing**: Multi-core optimization for large datasets  
          - **Memory Efficient**: Streaming processing for large files
          - **Optimized Lookup**: Integer-based IP range matching with SubnetTree
          - **Network Optimization**: Automatic collapsing of overlapping CIDR blocks
          
          ## 🌼 Features and Optimizations
          
          - **🌍 Multi-country IP blocklist aggregation** for comprehensive regional security  
          - **📊 Per-country statistical analysis** with detailed filtering metrics
          - **🔄 Automated multi-country updates** via GitHub Actions
          - **🚀 Parallel country processing** for improved performance
          - **📁 Individual and combined output files** for flexible deployment
          - **🛡️ Regional threat mitigation** with configurable multi-country rules
          - **💾 Memory-efficient processing** even with multiple large country datasets
          - **🔗 Network optimization** with automatic CIDR block collapsing

          ## 👍 Acknowledgements
          
          This project would not have been possible without the amazing work of the following other projects:

          * * *
          
          ### 🎩 Datopian
          
          Thank you to [Datopian](https://github.com/datasets/geoip2-ipv4) for maintaining the [GeoIP2 IPv4 dataset](https://datahub.io/core/geoip2-ipv4). This dataset provides otherwise impossible information for IP geolocation, allowing this project to filter IPs based on multiple countries simultaneously.
          
          - [GeoIP2 IPv4 Dataset](https://datahub.io/core/geoip2-ipv4) by Datopian is essential for filtering and identifying IP addresses across various countries, enabling the dynamic multi-country functionality of this project.

          
          * * *

          ### 🦘 Andrew Twin
          
          Special thanks to [Andrew Twin](https://github.com/andrewtwin) for creating and sharing the [IP Aggregator](https://github.com/andrewtwin/ip-aggregator) project. Andrew's work on efficiently aggregating IP blocklists was a fundamental inspiration and foundation for this enhanced multi-country version.
          
          - The [IP Aggregator](https://github.com/andrewtwin/ip-aggregator) allows easy downloading, parsing, and filtering of multiple IP blocklists, which this project leverages and extends for multi-country IP management tasks.

          
          * * *
          
          ### 📗 Blocklist maintainers
          
          I would like to additionally acknowledge the maintainers and contributors of various [IP blocklists](https://github.com/topics/ip-blocklist) and [IP blacklists](https://github.com/topics/ip-blacklist). Thank you for maintaining up-to-date, community-driven threat intelligence that forms the foundation of generating these multi-country filtered files. While the specific lists in this repo may vary, the collective dedication to improving online security and privacy of all contributors is deeply appreciated.
          
          
          * * *
          
          EOF

      - name: Commit and push changes
        run: |
          echo "=== Committing Results ==="
          
          # Configure git
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
          # Add all changes
          git add .
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            # Create commit message with statistics
            COMMIT_MSG="🤖 Automated IP blocklist update"
            
            if [ -f "data/output/aggregated.txt" ]; then
              TOTAL_COUNT=$(wc -l < data/output/aggregated.txt)
              COMMIT_MSG="$COMMIT_MSG - $TOTAL_COUNT total IPs"
            fi
            
            # Count country files
            COUNTRY_FILES=$(find data/output/ -name "aggregated-*-only.txt" | wc -l)
            if [ "$COUNTRY_FILES" -gt 0 ]; then
              COMMIT_MSG="$COMMIT_MSG, $COUNTRY_FILES countries"
            fi
            
            # Add timestamp
            TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M UTC")
            COMMIT_MSG="$COMMIT_MSG ($TIMESTAMP)"
            
            echo "Committing with message: $COMMIT_MSG"
            git commit -m "$COMMIT_MSG"
            git push
            
            echo "✅ Changes committed and pushed successfully"
          fi
